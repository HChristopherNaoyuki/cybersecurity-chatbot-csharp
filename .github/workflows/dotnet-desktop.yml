# CI/CD Workflow for Cybersecurity Chatbot (.NET Core)
# This workflow automates the build, test, and verification process for the chatbot application
name: .NET Core CI

# Trigger conditions - defines when the workflow should execute
on:
  # Trigger on push events to the master branch
  push:
    branches: [ "master" ]
  # Also trigger on pull requests targeting the master branch
  pull_request:
    branches: [ "master" ]

# Jobs represent a sequence of tasks that execute on the same runner
jobs:
  # Primary build job that handles compilation and verification
  build:
    # Windows runner required for .NET applications with audio capabilities
    runs-on: windows-latest

    # Sequential steps that comprise the build process
    steps:
    # Step 1: Repository checkout - fetches the source code
    - name: Checkout code
      uses: actions/checkout@v4  # Official GitHub Action for code checkout
      # Note: Uses latest stable version (v4) of the checkout action

    # Step 2: .NET environment setup
    - name: Setup .NET
      uses: actions/setup-dotnet@v4  # Official .NET setup action
      with:
        # Specifies .NET 8.0 SDK installation (x denotes latest patch version)
        dotnet-version: '8.0.x'
        # Rationale: Matches project's target framework for consistent builds

    # Step 3: Dependency restoration
    - name: Restore dependencies
      run: dotnet restore  # Standard .NET CLI command
      # Purpose: Downloads all NuGet packages specified in project files
      # Runs recursively for all projects in the solution

    # Step 4: Solution compilation
    - name: Build
      run: dotnet build --configuration Release --no-restore
      # Flags:
      # --configuration Release: Optimized production build
      # --no-restore: Skips redundant package restoration (done in previous step)
      # Output: Compiled binaries in bin/Release/net8.0 directory

    # Step 5: Test execution
    - name: Test
      run: dotnet test --no-restore --verbosity normal
      # Flags:
      # --no-restore: Uses already restored packages
      # --verbosity normal: Balanced output detail
      # Note: Executes all unit tests in the solution

    # Step 6: Comprehensive audio file verification
    - name: Verify audio file exists and is valid
      run: |
        # PowerShell script for robust audio file validation
        # ================================================
        
        # 1. File Existence Check
        $audioPath = "cybersecurity-chatbot-csharp/Audio/welcome.wav"
        if (-not (Test-Path $audioPath)) {
          Write-Output "Error: Audio file not found at expected location: $audioPath"
          exit 1  # Fail build with non-zero exit code
        }
        
        # 2. File Size Validation
        $fileSize = (Get-Item $audioPath).Length
        if ($fileSize -eq 0) {
          Write-Output "Error: Audio file exists but is empty (0 bytes)"
          exit 1
        }
        
        # 3. File Format Verification (WAV header check)
        $header = Get-Content $audioPath -Encoding Byte -TotalCount 4
        $wavHeader = [Text.Encoding]::ASCII.GetString($header)
        
        if ($wavHeader -ne "RIFF") {
          Write-Output "Error: File does not appear to be a valid WAV file (missing RIFF header)"
          exit 1
        }
        
        # 4. Duration Sanity Check (Non-blocking)
        try {
          $soundPlayer = New-Object System.Media.SoundPlayer $audioPath
          $durationMs = $soundPlayer.LoadTimeout
          
          # Expected duration range (500ms to 5 seconds)
          if ($durationMs -lt 500 -or $durationMs -gt 5000) {
            Write-Output "Warning: Audio duration ($durationMs ms) may be too short or too long"
            # Note: This is a warning only - doesn't fail the build
          }
        } catch {
          Write-Output "Warning: Could not verify audio duration: $_"
        }
        
        # Success case
        Write-Output "Audio verification passed - Valid WAV file confirmed"
        exit 0  # Explicit success exit code

    # Step 7: Artifact archiving
    - name: Archive production artifacts
      uses: actions/upload-artifact@v4  # Official artifact upload action
      with:
        # Descriptive name for the artifact bundle
        name: cybersecurity-chatbot  
        # Files to include in the artifact:
        path: |
          # 1. Compiled application binaries
          cybersecurity-chatbot-csharp/bin/Release/net8.0/
          # 2. Audio assets directory
          cybersecurity-chatbot-csharp/Audio/
        # Note: Artifacts are retained for 90 days by default
