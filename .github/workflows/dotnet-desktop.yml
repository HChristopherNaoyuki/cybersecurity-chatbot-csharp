# ==============================================
# .NET Core CI/CD Pipeline for Cybersecurity Chatbot
# ==============================================
# This automated workflow handles:
# - Code compilation
# - Dependency management
# - Unit testing
# - Artifact generation
# - Test reporting

# Workflow identifier (appears in GitHub Actions UI)
name: .NET Core CI

# ========================
# TRIGGER CONFIGURATION
# ========================
on:
  # Trigger on push events to main/master branches
  push:
    branches: [ "main", "master" ]  # Supports modern (main) and legacy (master) branch names
  
  # Trigger on pull requests targeting main/master
  pull_request:
    branches: [ "main", "master" ]
    # Note: Runs in the context of the merge commit

# =================
# JOBS DEFINITION
# =================
jobs:
  # Primary job for building and testing the application
  build-and-test:
    # Windows runner required for .NET applications
    runs-on: windows-latest  # Uses GitHub-hosted Windows Server 2022
    
    # ====================
    # EXECUTION STEPS
    # ====================
    steps:
    # -----------------------------------
    # STEP 1: REPOSITORY CHECKOUT
    # -----------------------------------
    - name: Checkout repository
      uses: actions/checkout@v4  # Official GitHub Action
      with:
        fetch-depth: 0  # Gets complete git history (needed for version tagging)
        # Note: fetch-depth: 0 is slightly slower but enables full version info

    # -----------------------------------
    # STEP 2: .NET ENVIRONMENT SETUP
    # -----------------------------------
    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'  # Installs latest patch of .NET 8.0
        # Recommendation: Pin to exact version for production (e.g., '8.0.101')

    # -----------------------------------
    # STEP 3: DEPENDENCY RESTORATION
    # -----------------------------------
    - name: Restore dependencies
      run: dotnet restore
      env:
        NUGET_CACHE: ${{ github.workspace }}/.nuget/cache  # Custom cache location
        # Benefits:
        # - Faster subsequent builds
        # - Isolated from system global cache
        # - Cleaner workspace

    # -----------------------------------
    # STEP 4: SOLUTION COMPILATION
    # -----------------------------------
    - name: Build solution
      run: dotnet build --configuration Release --no-restore --verbosity normal
      env:
        DOTNET_CLI_TELEMETRY_OPTOUT: 1  # Disables Microsoft telemetry
        # Additional options considered:
        # --warnaserror (treat warnings as errors)
        # --p:ContinuousIntegrationBuild=true (CI-optimized build)

    # -----------------------------------
    # STEP 5: UNIT TEST EXECUTION
    # -----------------------------------
    - name: Run tests
      run: dotnet test --configuration Release --no-build --verbosity normal --logger "trx;LogFileName=test-results.trx"
      env:
        DOTNET_NOLOGO: true  # Suppresses .NET branding messages
        # Test configuration:
        # --no-build: Uses existing build output
        # --logger: Generates Visual Studio Test Results format
        # Consider adding: --collect:"Code Coverage" for coverage reports

    # -----------------------------------
    # STEP 6: TEST RESULTS PUBLISHING
    # -----------------------------------
    - name: Publish test results
      uses: actions/upload-artifact@v4
      if: always()  # Uploads even if previous steps fail
      with:
        name: test-results-${{ github.run_id }}  # Unique artifact name
        path: |
          **/TestResults/*.trx
          **/coverage.cobertura.xml
        # Artifacts can be downloaded from GitHub UI
        # Retention: 90 days by default

    # -----------------------------------
    # STEP 7: ARTIFACT GENERATION
    # -----------------------------------
    - name: Create build artifact
      run: dotnet publish --configuration Release --output ./publish --no-restore
      # Publishes:
      # - Compiled binaries
      # - Runtime dependencies
      # - Content files
      # --no-restore: Uses previously restored packages

    # -----------------------------------
    # STEP 8: ARTIFACT UPLOAD
    # -----------------------------------
    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: cybersecurity-chatbot-${{ github.run_number }}
        path: ./publish/**/*
        retention-days: 7  # Reduces storage usage
        # Alternative: Use actions/cache for better performance
