# Cybersecurity Chatbot CI Pipeline (Windows)
# Optimized for Windows runner with .NET 8
name: Windows .NET CI

on:
  push:
    branches: [ "main", "master" ]
  pull_request:
    branches: [ "main", "master" ]

jobs:
  build:
    runs-on: windows-latest  # Explicit Windows runner
    
    steps:
    # ----------------------------------
    # 1. CHECKOUT - Get the latest code
    # ----------------------------------
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Get full git history for version info

    # ----------------------------------
    # 2. DOTNET SETUP - Prepare environment
    # ----------------------------------
    - name: Setup .NET 8 SDK
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'  # Latest stable .NET 8

    # ----------------------------------
    # 3. BUILD - Compile the solution
    # ----------------------------------
    - name: Build solution
      run: |
        # Explicit solution path avoids ambiguity
        $solutionPath = Get-ChildItem -Filter *.sln -Recurse | Select-Object -First 1
        if (-not $solutionPath) {
          Write-Error "No solution file found!"
          exit 1
        }
        dotnet build $solutionPath.FullName --configuration Release
      shell: pwsh  # Use PowerShell for better Windows integration

    # ----------------------------------
    # 4. TEST - Run unit tests
    # ----------------------------------
    - name: Run tests
      run: |
        $projectPath = Get-ChildItem -Filter *.csproj -Recurse | Select-Object -First 1
        if (-not $projectPath) {
          Write-Error "No project file found!"
          exit 1
        }
        dotnet test $projectPath.FullName --configuration Release --no-build --logger "trx"
      shell: pwsh

    # ----------------------------------
    # 5. PUBLISH - Create deployment package
    # ----------------------------------
    - name: Publish application
      run: |
        $projectPath = Get-ChildItem -Filter *.csproj -Recurse | Select-Object -First 1
        dotnet publish $projectPath.FullName `
          --configuration Release `
          --output ./publish `
          --runtime win-x64 `
          --self-contained true `
          /p:PublishSingleFile=true
      shell: pwsh

    # ----------------------------------
    # 6. ARTIFACTS - Package the results
    # ----------------------------------
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: chatbot-package
        path: |
          ./publish/
          !./publish/*.pdb  # Exclude debug symbols
        retention-days: 3
